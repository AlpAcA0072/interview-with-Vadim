[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: interview-with-Vadim-1080p.mp4
Video File: interview-with-Vadim-1080p.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.125000
Scroll Position: 207
Active Line: 240
Video Position: 32825

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:02.46,Default,,0,0,0,,Hi, Vadim, nice to talk with you.
Dialogue: 0,0:00:02.46,0:00:06.84,Default,,0,0,0,,I’m teaching C and C++ in my university.
Dialogue: 0,0:00:06.84,0:00:12.44,Default,,0,0,0,,I took the source code in OpenCV as an example to the students.
Dialogue: 0,0:00:12.44,0:00:19.16,Default,,0,0,0,,And I also suggested my students to learn C++ from OpenCV.
Dialogue: 0,0:00:19.16,0:00:24.12,Default,,0,0,0,,I found the class cv::Mat is an excellent example.
Dialogue: 0,0:00:25.08,0:00:28.00,Default,,0,0,0,,And, I know you designed the class.
Dialogue: 0,0:00:28.10,0:00:28.80,Default,,0,0,0,,So
Dialogue: 0,0:00:29.04,0:00:33.44,Default,,0,0,0,,Could you tell me some history of the Mat class?
Dialogue: 0,0:00:33.50,0:00:36.96,Default,,0,0,0,,And why to design a new C++ class?
Dialogue: 0,0:00:36.96,0:00:41.00,Default,,0,0,0,,I remember at the beginning,
Dialogue: 0,0:00:41.00,0:00:49.00,Default,,0,0,0,,OpenCV used the IplImage and CvMat structure for images.
Dialogue: 0,0:00:49.00,0:00:51.16,Default,,0,0,0,,So, why you designed it?
Dialogue: 0,0:00:51.16,0:00:53.76,Default,,0,0,0,,Can you introduce a little bit to us?
Dialogue: 0,0:00:54.50,0:00:55.76,Default,,0,0,0,,Yes, sure.
Dialogue: 0,0:00:56.50,0:00:58.76,Default,,0,0,0,,I'd like to talk to you again, Shiqi.
Dialogue: 0,0:00:59.36,0:01:09.50,Default,,0,0,0,,First of all, I'm very pleased that, OpenCV is now taught in universities including your university,
Dialogue: 0,0:01:09.70,0:01:13.48,Default,,0,0,0,,and you chose CV::Mat as am example of C++ design.
Dialogue: 0,0:01:13.48,0:01:20.84,Default,,0,0,0,,Actually it's a big pleasure for me and for the whole OpenCV team that
Dialogue: 0,0:01:20.84,0:01:25.48,Default,,0,0,0,,our pieces of OpenCV design are used in such a way.
Dialogue: 0,0:01:25.48,0:01:35.72,Default,,0,0,0,,Indeed, it took several years for OpenCV team to come up with this C++ class.
Dialogue: 0,0:01:35.72,0:01:36.92,Default,,0,0,0,,In the very beginning,
Dialogue: 0,0:01:36.92,0:01:41.20,Default,,0,0,0,,the very first structure in OpenCV
Dialogue: 0,0:01:41.20,0:01:43.88,Default,,0,0,0,,as you correctly pointed out was IplImage.
Dialogue: 0,0:01:43.88,0:01:51.60,Default,,0,0,0,,This is because OpenCV was started at Intel in 1998
Dialogue: 0,0:01:51.60,0:01:56.00,Default,,0,0,0,,as a close source library, and then released as open source.
Dialogue: 0,0:01:56.00,0:02:02.36,Default,,0,0,0,,At that time, at Intel, the family of performance libraries,
Dialogue: 0,0:02:02.36,0:02:06.76,Default,,0,0,0,,like for signal processing acceleration, for image processing acceleration,
Dialogue: 0,0:02:06.76,0:02:12.04,Default,,0,0,0,,and like one of the libraries was IPL,
Dialogue: 0,0:02:12.04,0:02:14.80,Default,,0,0,0,,Image Processing Library by Intel.
Dialogue: 0,0:02:14.80,0:02:19.00,Default,,0,0,0,,And it uses IplImage as the main data structure.
Dialogue: 0,0:02:19.00,0:02:24.32,Default,,0,0,0,,The original OpenCV was planned as addition to IPL
Dialogue: 0,0:02:24.32,0:02:28.52,Default,,0,0,0,,or IPL concentrates on image processing,
Dialogue: 0,0:02:28.52,0:02:32.32,Default,,0,0,0,,and OpenCV will concentrate on computer vision.
Dialogue: 0,0:02:32.32,0:02:35.80,Default,,0,0,0,,In the begin, OpenCV was called CVL,
Dialogue: 0,0:02:35.80,0:02:36.75,Default,,0,0,0,,Computer Vision Library.
Dialogue: 0,0:02:36.80,0:02:41.07,Default,,0,0,0,,So it even use the same name pattern as IPL.
Dialogue: 0,0:02:41.07,0:02:47.52,Default,,0,0,0,,just a set of computer algorithms of image processing, computer vision.
Dialogue: 0,0:02:47.52,0:02:52.52,Default,,0,0,0,,Soon, we realized the IplImage was not enough,
Dialogue: 0,0:02:52.52,0:02:55.04,Default,,0,0,0,,because in computer vision, if you do, for example,
Dialogue: 0,0:02:55.04,0:03:01.80,Default,,0,0,0,,camera preparations, some 3D vision, whatever you need, general matrix class.
Dialogue: 0,0:03:01.80,0:03:04.80,Default,,0,0,0,,And sometimes, for example,
Dialogue: 0,0:03:04.80,0:03:06.84,Default,,0,0,0,,you need more than two dimensional arrays,
Dialogue: 0,0:03:06.84,0:03:08.12,Default,,0,0,0,,like 3 dimensional arrays.
Dialogue: 0,0:03:08.12,0:03:11.94,Default,,0,0,0,,Sometimes you need sparse multi-dimensional arrays.
Dialogue: 0,0:03:12.02,0:03:14.26,Default,,0,0,0,,So in addition to IplImage,
Dialogue: 0,0:03:14.26,0:03:18.96,Default,,0,0,0,,we also create CvMat, CvMatND indeed and CvSparseMat
Dialogue: 0,0:03:18.96,0:03:23.46,Default,,0,0,0,,to like other those use cases.
Dialogue: 0,0:03:25.28,0:03:32.91,Default,,0,0,0,,Then a time later, Intel abandoned IPL in favor of like library of low level primitives.
Dialogue: 0,0:03:33.02,0:03:37.55,Default,,0,0,0,,It is called IPP and it is still used in OpenCV for acceleration.
Dialogue: 0,0:03:44.57,0:03:50.26,Default,,0,0,0,,We have to maintain compatibility with IPL since then.
Dialogue: 0,0:03:50.26,0:03:54.48,Default,,0,0,0,,Because like uh, the library was gone and replaced with IPP.\N
Dialogue: 0,0:03:54.93,0:04:03.64,Default,,0,0,0,,So we mostly used CvMat C structure for most of use cases\N
Dialogue: 0,0:04:04.17,0:04:06.88,Default,,0,0,0,,for point clouds, for mathesis, for images.
Dialogue: 0,0:04:09.08,0:04:13.95,Default,,0,0,0,,But we constantly got requests from users\N
Dialogue: 0,0:04:13.95,0:04:17.82,Default,,0,0,0,,to introduce C++ API
Dialogue: 0,0:04:17.82,0:04:25.37,Default,,0,0,0,,because C++ was much more convenient to use, instead of C.\N
Dialogue: 0,0:04:26.84,0:04:34.88,Default,,0,0,0,,In the year 2008, when Willow Garage company started to found OpenCV,\N
Dialogue: 0,0:04:34.88,0:04:39.82,Default,,0,0,0,,by the way Willow Garage company also created ROS, Robot Operating System \N
Dialogue: 0,0:04:40.40,0:04:43.77,Default,,0,0,0,,It was a quite big startup at a certain point.\N
Dialogue: 0,0:04:43.77,0:04:46.44,Default,,0,0,0,,It founded OpenCV development.
Dialogue: 0,0:04:46.93,0:04:50.40,Default,,0,0,0,,They gave us resources and we started to think\N
Dialogue: 0,0:04:50.40,0:04:54.75,Default,,0,0,0,,how to redesign OpenCV to use C++ API.
Dialogue: 0,0:04:54.75,0:04:57.86,Default,,0,0,0,,and definitely we need C++ data structure.
Dialogue: 0,0:04:57.86,0:05:02.88,Default,,0,0,0,,instead of CvMat and IplImage C structures.\N
Dialogue: 0,0:05:04.26,0:05:05.77,Default,,0,0,0,,So we looked around,
Dialogue: 0,0:05:05.77,0:05:09.11,Default,,0,0,0,,and for the source of inspiration,
Dialogue: 0,0:05:09.11,0:05:14.26,Default,,0,0,0,,and we found that Matlab is a very good example of good design.\N
Dialogue: 0,0:05:14.26,0:05:21.51,Default,,0,0,0,,That is Matlab is not an as flexible language as C or C++.\N
Dialogue: 0,0:05:22.00,0:05:24.35,Default,,0,0,0,,But it is super convenient.
Dialogue: 0,0:05:24.35,0:05:34.75,Default,,0,0,0,,It has this matrix, or array data type. And all the toolboxes in Matlab, use this data type.\N
Dialogue: 0,0:05:34.75,0:05:38.62,Default,,0,0,0,,Therefore, there is no absolutely not compatibility issues\N
Dialogue: 0,0:05:38.62,0:05:42.31,Default,,0,0,0,,If you want to use those toolboxes.\N
Dialogue: 0,0:05:42.31,0:05:45.05,Default,,0,0,0,,You just download them and use together
Dialogue: 0,0:05:45.05,0:05:51.73,Default,,0,0,0,,without any convert stage, structures from one type to another.\N
Dialogue: 0,0:05:51.73,0:05:54.13,Default,,0,0,0,,You just use those toolboxes together.\N
Dialogue: 0,0:05:54.13,0:06:01.91,Default,,0,0,0,,And they, MathWorks, even use those arrayed data types for images.\N
Dialogue: 0,0:06:01.91,0:06:04.35,Default,,0,0,0,,In matlab, there is image processing toolbox,
Dialogue: 0,0:06:04.35,0:06:07.68,Default,,0,0,0,,and it also uses matrix data type.
Dialogue: 0,0:06:07.68,0:06:10.04,Default,,0,0,0,,I really like this idea that
Dialogue: 0,0:06:10.04,0:06:13.86,Default,,0,0,0,,one data type is used for any kind of array.
Dialogue: 0,0:06:14.26,0:06:22.04,Default,,0,0,0,,So we just tried to replicate Matlab API\N
Dialogue: 0,0:06:22.04,0:06:24.17,Default,,0,0,0,,as goal as we could.\N
Dialogue: 0,0:06:24.17,0:06:29.20,Default,,0,0,0,,that is we wanted memory to be managed automatically,\N
Dialogue: 0,0:06:29.20,0:06:35.77,Default,,0,0,0,,we wanted convenient element access operations, etc.\N
Dialogue: 0,0:06:35.77,0:06:39.77,Default,,0,0,0,,So we created this class, C++ structure, cv::Mat.\N
Dialogue: 0,0:06:39.77,0:06:43.33,Default,,0,0,0,,They replaced all of the structures,\N
Dialogue: 0,0:06:43.33,0:06:46.82,Default,,0,0,0,,IplImage, CvMat, CvMatND\N
Dialogue: 0,0:06:46.82,0:06:50.57,Default,,0,0,0,,Sparse model was a seperate structure\N
Dialogue: 0,0:06:50.82,0:06:53.10,Default,,0,0,0,,But all the dense arrays were replaced with just a single structure.\N
Dialogue: 0,0:06:53.98,0:07:02.77,Default,,0,0,0,,We know different Mat objects may share the same memory for matrix data to avoid memory leak.\N
Dialogue: 0,0:07:02.77,0:07:07.20,Default,,0,0,0,,There is a complex mechanism in Mat class.
Dialogue: 0,0:07:07.20,0:07:17.86,Default,,0,0,0,,If you redesign Mat class now, will you use smart pointers in the new C++ standards?
Dialogue: 0,0:07:22.78,0:07:26.91,Default,,0,0,0,,We did have a shared pointer\N
Dialogue: 0,0:07:27.33,0:07:30.35,Default,,0,0,0,,appeared in C++11 if I'm not mistaken.\N
Dialogue: 0,0:07:30.35,0:07:33.06,Default,,0,0,0,,In C++20,\N
Dialogue: 0,0:07:33.06,0:07:38.53,Default,,0,0,0,,it was special version of this shared pointer that can use atomic operations.\N
Dialogue: 0,0:07:39.60,0:07:43.82,Default,,0,0,0,,And we create cv::Mat in 2009,\N
Dialogue: 0,0:07:43.82,0:07:46.84,Default,,0,0,0,,so even 2 years before C++11,\N
Dialogue: 0,0:07:47.42,0:07:52.22,Default,,0,0,0,,so we couldn't wait for the new C++ standard to come out.\N
Dialogue: 0,0:07:52.22,0:07:56.04,Default,,0,0,0,,So we used our own implementation of shared pointer.\N
Dialogue: 0,0:07:56.04,0:07:58.04,Default,,0,0,0,,Of course it's not a new idea.
Dialogue: 0,0:07:58.48,0:08:01.33,Default,,0,0,0,,It was well known for decades.\N
Dialogue: 0,0:08:02.42,0:08:06.44,Default,,0,0,0,,Even Python created in 90s.\N
Dialogue: 0,0:08:07.28,0:08:14.48,Default,,0,0,0,,It used shared pointers with a reference counter to manage memory.\N
Dialogue: 0,0:08:14.48,0:08:16.88,Default,,0,0,0,,And it still uses this technique.
Dialogue: 0,0:08:17.24,0:08:22.66,Default,,0,0,0,,So we wanted memory to be managed automatically.
Dialogue: 0,0:08:22.66,0:08:30.80,Default,,0,0,0,,And we want memory to be managed in the thread safe manner.
Dialogue: 0,0:08:30.97,0:08:35.40,Default,,0,0,0,,So we wanted to use atomic operations from the very beginning.\N
Dialogue: 0,0:08:35.86,0:08:39.20,Default,,0,0,0,,We implemented this mechanism in cv::Mat.\N
Dialogue: 0,0:08:39.77,0:08:44.44,Default,,0,0,0,,And I would say that overall cv::Mat implementation\N
Dialogue: 0,0:08:44.44,0:08:48.40,Default,,0,0,0,,and architecture are quite complex.\N
Dialogue: 0,0:08:48.40,0:08:51.42,Default,,0,0,0,,If you look inside, you would notice that
Dialogue: 0,0:08:51.42,0:08:58.77,Default,,0,0,0,,for example, there is not a signal reference counter but instead there are two reference counters in each matrix.
Dialogue: 0,0:08:59.20,0:09:02.66,Default,,0,0,0,,So overall,\N
Dialogue: 0,0:09:02.66,0:09:03.64,Default,,0,0,0,,I would say,
Dialogue: 0,0:09:03.64,0:09:12.04,Default,,0,0,0,,if we use this modern C++ standard to implement
Dialogue: 0,0:09:12.04,0:09:16.66,Default,,0,0,0,,those reference counting, shared memory,\N
Dialogue: 0,0:09:16.66,0:09:22.80,Default,,0,0,0,,I would say overall implementation would not become noticeable simple\N
Dialogue: 0,0:09:22.80,0:09:24.57,Default,,0,0,0,,In another words,\N
Dialogue: 0,0:09:24.57,0:09:27.91,Default,,0,0,0,,if we create cv::Mat now\N
Dialogue: 0,0:09:27.91,0:09:34.53,Default,,0,0,0,,I would say the implementation will be almost the same as it was like many years ago.
Dialogue: 0,0:09:34.54,0:09:40.66,Default,,0,0,0,,Even though, C++ standard going in the right direction.\N
Dialogue: 0,0:09:40.66,0:09:46.25,Default,,0,0,0,,For CV Ptr class [TODO:vp] OpenCV, we used shared pointer for matrix \N
Dialogue: 0,0:09:47.42,0:09:52.65,Default,,0,0,0,,I would say we would use the same implementation as before.\N
Dialogue: 0,0:09:52.65,0:09:56.05,Default,,0,0,0,,Mat class is not a template class.
Dialogue: 0,0:09:56.60,0:09:58.37,Default,,0,0,0,,In my class,
Dialogue: 0,0:09:58.37,0:10:02.48,Default,,0,0,0,,I ask my student to implement a matrix class
Dialogue: 0,0:10:02.48,0:10:06.65,Default,,0,0,0,,to improve their programming skills.
Dialogue: 0,0:10:08.74,0:10:16.31,Default,,0,0,0,,I asked them that the matrix class they designed should support many different data types,
Dialogue: 0,0:10:16.31,0:10:25.77,Default,,0,0,0,,including 8-bit integers, 16-bit integers and floating point, like that.\N
Dialogue: 0,0:10:25.77,0:10:30.20,Default,,0,0,0,,Most student used class template.
Dialogue: 0,0:10:30.20,0:10:36.42,Default,,0,0,0,,So I think it's a very straightforward idea to use a template for that.
Dialogue: 0,0:10:36.42,0:10:41.05,Default,,0,0,0,,Could you tell us why the Mat class you designed
Dialogue: 0,0:10:41.42,0:10:43.48,Default,,0,0,0,,is not a template class?
Dialogue: 0,0:10:44.77,0:10:51.28,Default,,0,0,0,,In OpenCV team, we had some discussions like how to implement the thing\N
Dialogue: 0,0:10:51.85,0:11:02.34,Default,,0,0,0,,and at some point, at Intel, we had another project that implemented biasing networks [TODO:VP biasing?]\N
Dialogue: 0,0:11:05.85,0:11:07.71,Default,,0,0,0,,That was quite complex library
Dialogue: 0,0:11:07.71,0:11:11.68,Default,,0,0,0,,they chose to go completely into that way.\N
Dialogue: 0,0:11:11.68,0:11:15.31,Default,,0,0,0,,So they created everything in templates.\N
Dialogue: 0,0:11:16.88,0:11:26.25,Default,,0,0,0,,And I know that currently you heavy use of template is one of the trends in C++.\N
Dialogue: 0,0:11:26.25,0:11:28.85,Default,,0,0,0,,Many people prefer to use templates.
Dialogue: 0,0:11:28.85,0:11:31.05,Default,,0,0,0,,to get the best efficiency.
Dialogue: 0,0:11:31.05,0:11:39.74,Default,,0,0,0,,In our case, we deliberately chose not to go completely to that way\N
Dialogue: 0,0:11:40.45,0:11:46.77,Default,,0,0,0,,Because we saw bad example, a library becomes unusable\N
Dialogue: 0,0:11:46.77,0:11:49.74,Default,,0,0,0,,because of its completely template
Dialogue: 0,0:11:49.74,0:11:55.85,Default,,0,0,0,,so we can take very long time to compile code that uses those libraries.\N
Dialogue: 0,0:11:55.85,0:12:02.14,Default,,0,0,0,,So when we speak about like generic library of algorithms\N
Dialogue: 0,0:12:02.20,0:12:11.31,Default,,0,0,0,,STL library with containers, basic algorithms like sort()\N
Dialogue: 0,0:12:14.88,0:12:22.08,Default,,0,0,0,,It's not that much complex, but there is still some, but it's not that much. In the case of computer vision.\N
Dialogue: 0,0:12:22.08,0:12:27.97,Default,,0,0,0,,Algorithms are quite, may become quite complex\N
Dialogue: 0,0:12:28.42,0:12:36.97,Default,,0,0,0,,And so if you make a matrix class as template,\N
Dialogue: 0,0:12:36.97,0:12:46.85,Default,,0,0,0,,It is a strong motivation to put a lot of code into header files\N
Dialogue: 0,0:12:46.85,0:12:48.85,Default,,0,0,0,,to make everything templates.\N
Dialogue: 0,0:12:52.25,0:12:55.88,Default,,0,0,0,,And for developers, it may become a simpler solution.\N
Dialogue: 0,0:12:55.88,0:13:03.20,Default,,0,0,0,,But for users, normally most of OpenCV users they use just a tiny part of OpenCV\N
Dialogue: 0,0:13:04.31,0:13:12.71,Default,,0,0,0,,But for them, to wait those long minutes or even hours for their code to be compiled\N
Dialogue: 0,0:13:12.71,0:13:14.71,Default,,0,0,0,,it is a big problem.
Dialogue: 0,0:13:15.22,0:13:22.08,Default,,0,0,0,,Unfortunately, together with templates and C++, they didn't introduce modules.
Dialogue: 0,0:13:22.08,0:13:25.40,Default,,0,0,0,,Modules are common to C++ only now,
Dialogue: 0,0:13:25.40,0:13:29.34,Default,,0,0,0,,and even now, the support for modules is immature.\N
Dialogue: 0,0:13:29.34,0:13:33.94,Default,,0,0,0,,Maybe several years later, when modules become widespread,
Dialogue: 0,0:13:33.94,0:13:38.65,Default,,0,0,0,,when compiling complete code becomes much more efficient,
Dialogue: 0,0:13:38.80,0:13:43.14,Default,,0,0,0,,then maybe more libraries will come out and will use template.\N
Dialogue: 0,0:13:43.62,0:13:49.45,Default,,0,0,0,,Now, it's like not a good idea.\N
Dialogue: 0,0:13:49.45,0:13:55.42,Default,,0,0,0,,So the first reason is we want to avoid long compile time.\N
Dialogue: 0,0:13:57.11,0:13:59.68,Default,,0,0,0,,The second reason is Python.
Dialogue: 0,0:14:00.42,0:14:08.51,Default,,0,0,0,,So even 10 years ago, we understood Python has a good, has a great potential. It is an excellent language.\N
Dialogue: 0,0:14:09.54,0:14:15.68,Default,,0,0,0,,Besides that has been Java that we also wanted to support\N
Dialogue: 0,0:14:16.08,0:14:20.14,Default,,0,0,0,,and also languages like Java has some support for templates.\N
Dialogue: 0,0:14:20.14,0:14:24.60,Default,,0,0,0,,But it's not completely compatible with C++.\N
Dialogue: 0,0:14:24.60,0:14:27.02,Default,,0,0,0,,Python, it doesn't have any template.\N
Dialogue: 0,0:14:27.11,0:14:30.02,Default,,0,0,0,,And we wanted OpenCV supported by Python [TODO:VP] as well.\N
Dialogue: 0,0:14:31.80,0:14:35.08,Default,,0,0,0,,So if you have template library,
Dialogue: 0,0:14:36.17,0:14:40.71,Default,,0,0,0,,creating code for Python is quite complex tasks.\N
Dialogue: 0,0:14:40.71,0:14:46.88,Default,,0,0,0,,Basically you need to implement [TODO:VP] all those functions in Python wrapper.\N
Dialogue: 0,0:14:46.88,0:14:56.00,Default,,0,0,0,,and see what is the actual data type that the user called or particular instance of template implementation.\N
Dialogue: 0,0:14:56.34,0:14:58.57,Default,,0,0,0,,So it is not quite convenient.
Dialogue: 0,0:14:58.57,0:15:03.22,Default,,0,0,0,,So I think we did it the right way\N
Dialogue: 0,0:15:03.22,0:15:10.54,Default,,0,0,0,,and we make right decision not to implement multiple OpenCV templates [TODO:VP].\N
Dialogue: 0,0:15:11.91,0:15:13.71,Default,,0,0,0,,OK, thank you.
Dialogue: 0,0:15:13.80,0:15:20.48,Default,,0,0,0,,Yeah, I also learned a lot from it.
Dialogue: 0,0:15:20.48,0:15:25.22,Default,,0,0,0,,Because we always balance between many factors.
Dialogue: 0,0:15:25.25,0:15:29.85,Default,,0,0,0,,So you introduced the factors in designing OpenCV,\N
Dialogue: 0,0:15:29.85,0:15:38.77,Default,,0,0,0,,but I also found there is a class template which is very similar to Mat in OpenCV, its name is Mat_.\N
Dialogue: 0,0:15:39.82,0:15:46.60,Default,,0,0,0,,Since we have Mat class, why to design Mat_, the template.\N
Dialogue: 0,0:15:47.77,0:15:54.68,Default,,0,0,0,,You just explain the template maybe have some shortcomings,
Dialogue: 0,0:15:54.94,0:15:58.40,Default,,0,0,0,,but we find there's a template for Mat.\N
Dialogue: 0,0:15:59.11,0:16:01.11,Default,,0,0,0,,Yes, yes.
Dialogue: 0,0:16:03.11,0:16:08.62,Default,,0,0,0,,Indeed there's another class that is\N
Dialogue: 0,0:16:08.62,0:16:12.97,Default,,0,0,0,,has this underline in the end of the name\N
Dialogue: 0,0:16:13.08,0:16:17.54,Default,,0,0,0,,and it doesn't introducing new members.
Dialogue: 0,0:16:17.54,0:16:22.37,Default,,0,0,0,,So it's finally compatible with normal cv::Mat in both ways.\N
Dialogue: 0,0:16:22.37,0:16:27.91,Default,,0,0,0,,So if we use, and it derives from Mat,\N
Dialogue: 0,0:16:27.91,0:16:32.91,Default,,0,0,0,,you can basically use it instead of Mat.
Dialogue: 0,0:16:33.54,0:16:38.74,Default,,0,0,0,,The only reason was to provide convenient element access operations.
Dialogue: 0,0:16:39.51,0:16:42.74,Default,,0,0,0,,If you have, for example,\N
Dialogue: 0,0:16:43.25,0:16:47.08,Default,,0,0,0,,some matrix algorithm that appears [TODO:VP] floats\N
Dialogue: 0,0:16:49.08,0:16:53.85,Default,,0,0,0,,First option to access the elment, you use to play at<>() method\N
Dialogue: 0,0:16:54.11,0:16:58.71,Default,,0,0,0,,with angle brackets<>, you just say that\N
Dialogue: 0,0:16:58.85,0:17:02.80,Default,,0,0,0,,myMatrix.add<float>(10, 20), in angle brackets<>,\N
Dialogue: 0,0:17:02.80,0:17:07.77,Default,,0,0,0,,you put data type like float, then you put indices in the parenthesis.\N
Dialogue: 0,0:17:08.68,0:17:14.20,Default,,0,0,0,,And with Mat_, you just use parentheses myMatrix(10,20)\N
Dialogue: 0,0:17:14.20,0:17:17.82,Default,,0,0,0,,You don't need add<>() with angle brackets. So it's another notation.\N
Dialogue: 0,0:17:18.20,0:17:25.48,Default,,0,0,0,,But I would say that the number of algorithms that access elements directly in this way [not many].\N
Dialogue: 0,0:17:28.14,0:17:34.77,Default,,0,0,0,,Some, savings that you type less symbols\N
Dialogue: 0,0:17:34.77,0:17:42.57,Default,,0,0,0,,it is so small, I could say that if we design matrix class today again,\N
Dialogue: 0,0:17:42.88,0:17:45.80,Default,,0,0,0,,I would not create this extra template class\N
Dialogue: 0,0:17:45.80,0:17:49.82,Default,,0,0,0,,because most people just use normal cv::Mat.\N
Dialogue: 0,0:17:50.42,0:17:51.82,Default,,0,0,0,,Yeah, yeah.
Dialogue: 0,0:17:52.60,0:17:56.40,Default,,0,0,0,,OK, I have another question.
Dialogue: 0,0:17:56.68,0:18:08.00,Default,,0,0,0,,The question, it's about hardware, because currently there are many kinds of hardware than in the past
Dialogue: 0,0:18:08.08,0:18:15.57,Default,,0,0,0,,in the past, maybe only CPU? Or mostly CPU. Currently we have GPU, NPU or VPU
Dialogue: 0,0:18:15.57,0:18:21.54,Default,,0,0,0,,Most of them have separate memory,
Dialogue: 0,0:18:21.82,0:18:28.88,Default,,0,0,0,,Is it possible to design an universal Mat class which can handle different kind of memory?\N
Dialogue: 0,0:18:30.88,0:18:34.60,Default,,0,0,0,,So, indeed nowadays
Dialogue: 0,0:18:36.60,0:18:43.94,Default,,0,0,0,,Using GPU, or specialized accelerators to speed up computer vision is a very popular trend.\N
Dialogue: 0,0:18:44.45,0:18:49.20,Default,,0,0,0,,Everybody goes in this direction,\N
Dialogue: 0,0:18:49.62,0:18:56.88,Default,,0,0,0,,For example, Nvidia Xavier used in cars, it's indeed very popular.\N
Dialogue: 0,0:18:59.48,0:19:04.48,Default,,0,0,0,,Unfortunately, from software site, there is no good standard
Dialogue: 0,0:19:05.60,0:19:10.22,Default,,0,0,0,,to program those hardware in an universal way.\N
Dialogue: 0,0:19:11.37,0:19:19.74,Default,,0,0,0,,About 10 years ago, when we had a project with AMD and Intel,\N
Dialogue: 0,0:19:19.74,0:19:23.62,Default,,0,0,0,,to bring OpenCL support into OpenCV,\N
Dialogue: 0,0:19:23.62,0:19:29.17,Default,,0,0,0,,I thought that OpenCL would soon become such a new universal standard.\N
Dialogue: 0,0:19:29.17,0:19:32.45,Default,,0,0,0,,that everybody would use OpenCL to program that hardware.\N
Dialogue: 0,0:19:32.45,0:19:38.97,Default,,0,0,0,,Hardware like GPU or specialized computer vision accelerators.\N
Dialogue: 0,0:19:41.34,0:19:54.85,Default,,0,0,0,,So, for OpenCL in OpenCV we created special class called cv::UMat that people can use to access OpenCL functionality.\N
Dialogue: 0,0:19:55.45,0:20:05.42,Default,,0,0,0,,And also OpenCV included several hundreds of OpenCL kernels to accelerate various algorithms from image processing to machine learning and so on.\N
Dialogue: 0,0:20:06.57,0:20:12.91,Default,,0,0,0,,Unfortunately, now OpenCL is sort of semi-abandoned standard.\N
Dialogue: 0,0:20:13.02,0:20:23.94,Default,,0,0,0,,It's still in the development, but it looks most manufacturers try to use something else.\N
Dialogue: 0,0:20:23.94,0:20:34.91,Default,,0,0,0,,Like Apple uses Metal standard, then on Android, Vulkan is more popular for game, for example.\N
Dialogue: 0,0:20:39.22,0:20:44.68,Default,,0,0,0,,Also there are some immature standards, for example,\N
Dialogue: 0,0:20:44.68,0:20:49.91,Default,,0,0,0,,the standard called OACC (OpenACC), open accelerator.\N
Dialogue: 0,0:20:50.88,0:20:58.88,Default,,0,0,0,,It aims at to bring some extensions to C++ standard to upload some loops to GPU.\N
Dialogue: 0,0:21:00.91,0:21:11.97,Default,,0,0,0,,But it is not quite mature, so I would say we're still waiting for such a standard come out to conveniently program various hardware.\N
Dialogue: 0,0:21:15.02,0:21:23.08,Default,,0,0,0,,Currently there are some positive trends for example,\N
Dialogue: 0,0:21:23.17,0:21:31.97,Default,,0,0,0,,like Vulkan group in Khronos community and OpenCL group, they work together\N
Dialogue: 0,0:21:31.97,0:21:38.48,Default,,0,0,0,,to provide OpenCL compatibility for Vulkan based hardware and such.\N
Dialogue: 0,0:21:38.48,0:21:43.42,Default,,0,0,0,,So maybe OpenCL is not completely dead and it will maybe revised at some point.\N
Dialogue: 0,0:21:45.00,0:21:46.65,Default,,0,0,0,,Yes, we are still waiting.\N
Dialogue: 0,0:21:46.78,0:21:52.97,Default,,0,0,0,,Without that standard it is difficult to come up with such a universal class\N
Dialogue: 0,0:21:52.97,0:21:58.85,Default,,0,0,0,,because you do not know which API should be added [TODO:VP], because everybody uses the different API.\N
Dialogue: 0,0:22:01.17,0:22:04.34,Default,,0,0,0,,I still have another question.
Dialogue: 0,0:22:04.85,0:22:07.20,Default,,0,0,0,,Actually it's two questions.\N
Dialogue: 0,0:22:07.20,0:22:16.51,Default,,0,0,0,,The first question is does OpenCV have any plan to update Mat class to a newer one?
Dialogue: 0,0:22:16.51,0:22:19.88,Default,,0,0,0,,Or we will continue to use the current one?
Dialogue: 0,0:22:22.17,0:22:26.11,Default,,0,0,0,,Yes, so OpenCV is quite large library with many users,
Dialogue: 0,0:22:26.94,0:22:35.17,Default,,0,0,0,,and so there are no plans to completely replace the cv::Mat with something else.\N
Dialogue: 0,0:22:35.51,0:22:39.37,Default,,0,0,0,,And cv::Mat is quite flexible for example\N
Dialogue: 0,0:22:39.37,0:22:45.28,Default,,0,0,0,,for Python bindings, users do not see this cv::Mat class.\N
Dialogue: 0,0:22:45.51,0:22:50.71,Default,,0,0,0,,They operate on common ...\N
Dialogue: 0,0:22:50.71,0:22:56.62,Default,,0,0,0,,on very popular in Python world, NumPy arrays.\N
Dialogue: 0,0:22:56.62,0:23:04.65,Default,,0,0,0,,And internally, those Python arrays are converted to cv::Mat, usually it happens without copying any data.\N
Dialogue: 0,0:23:04.65,0:23:06.65,Default,,0,0,0,,So it's very efficient.
Dialogue: 0,0:23:06.65,0:23:11.74,Default,,0,0,0,,We try to use this zero copy techniques.\N
Dialogue: 0,0:23:12.77,0:23:22.20,Default,,0,0,0,,Internally, as I said, we do not plan to completely replace cv::Mat with something completely new.\N
Dialogue: 0,0:23:22.54,0:23:27.28,Default,,0,0,0,,But we want to make some upgrades to cv::Mat.\N
Dialogue: 0,0:23:27.65,0:23:34.02,Default,,0,0,0,,First of all, we plan to extend the number of data types supported.
Dialogue: 0,0:23:34.48,0:23:41.94,Default,,0,0,0,,So maybe it will be some new integer data types, also we plan to add BFloat16.\N
Dialogue: 0,0:23:42.22,0:23:48.91,Default,,0,0,0,,Brain Floating 16, it's the relatively new 16 point format developed by Google. \N
Dialogue: 0,0:23:49.74,0:23:57.11,Default,,0,0,0,,and use in their TPU accelerators, and also it is now supported by Intel hardware\N
Dialogue: 0,0:23:57.60,0:24:04.25,Default,,0,0,0,,Upcoming ARM v9 and some other architectures.\N
Dialogue: 0,0:24:04.94,0:24:08.42,Default,,0,0,0,,So it's quite popular and we want to add support for it.
Dialogue: 0,0:24:09.31,0:24:13.31,Default,,0,0,0,,Another new feature is\N
Dialogue: 0,0:24:14.37,0:24:19.31,Default,,0,0,0,,to support one dimensional arrays.\N
Dialogue: 0,0:24:21.05,0:24:30.45,Default,,0,0,0,,As I said, we borrowed this cv::Mat class idea from Matlab,\N
Dialogue: 0,0:24:30.45,0:24:35.82,Default,,0,0,0,,and in Matlab, there is no one dimensional array, as far as I know.\N
Dialogue: 0,0:24:37.08,0:24:43.02,Default,,0,0,0,,One dimensional array is represented as two dimensional 1xN and Nx1 array.\N
Dialogue: 0,0:24:43.02,0:24:53.28,Default,,0,0,0,,And in OpenCV we took the same convention, but it appears to be not quite convenient for Python bindings\N
Dialogue: 0,0:24:53.28,0:24:56.54,Default,,0,0,0,,and for some deep learning areas that
Dialogue: 0,0:24:56.54,0:25:01.91,Default,,0,0,0,,we are trying to add to OpenCV currently like speech recognition\N
Dialogue: 0,0:25:01.91,0:25:05.00,Default,,0,0,0,,or whatever some areas on dimensional arrays are important\N
Dialogue: 0,0:25:05.00,0:25:10.68,Default,,0,0,0,,We want to support for real one dimensional arrays to OpenCV.\N
Dialogue: 0,0:25:11.91,0:25:14.40,Default,,0,0,0,,The third feature, we are still thinking of it.\N
Dialogue: 0,0:25:14.40,0:25:27.51,Default,,0,0,0,,But, maybe we will add some tag into cv::Mat that will indicate, that will provide some indication to what is the data, that marks the source.\N
Dialogue: 0,0:25:27.51,0:25:33.77,Default,,0,0,0,,For example, the tag can be RGB or BGR to indicate what is the order of channels.\N
Dialogue: 0,0:25:33.77,0:25:40.51,Default,,0,0,0,,Maybe it will solve some old problems, when people just put,\N
Dialogue: 0,0:25:41.42,0:25:49.37,Default,,0,0,0,,use some matrix with incorrect data channels, and sometimes they get wrong visualization.\N
Dialogue: 0,0:25:49.60,0:25:55.31,Default,,0,0,0,,Instead of a red face, you will get blue faces. In some cases,\N
Dialogue: 0,0:25:55.51,0:26:03.54,Default,,0,0,0,,You just get maybe slightly worse performance from some deep nets, object detection networks.\N
Dialogue: 0,0:26:03.54,0:26:08.80,Default,,0,0,0,,so it still detects objects, but not as good as with proper order channels.\N
Dialogue: 0,0:26:08.80,0:26:12.22,Default,,0,0,0,,So it's a very subtle bug to detect.\N
Dialogue: 0,0:26:12.22,0:26:19.14,Default,,0,0,0,,And maybe with this tags, this problem will disappear.\N
Dialogue: 0,0:26:19.14,0:26:21.42,Default,,0,0,0,,So we are still thinking of..
Dialogue: 0,0:26:21.45,0:26:31.54,Default,,0,0,0,,Yeah, sure, yeah because in my course, the final project is to do some CNN
Dialogue: 0,0:26:31.54,0:26:34.51,Default,,0,0,0,,They should implement CNN by themselves.\N
Dialogue: 0,0:26:35.42,0:26:48.97,Default,,0,0,0,,So in the data reading from the image, the default channel is BGR, a lot of students were confused by that and made some errors.\N
Dialogue: 0,0:26:50.25,0:27:00.20,Default,,0,0,0,,I know there will be some students from my class and also from maybe all over the world will watch this video.\N
Dialogue: 0,0:27:00.31,0:27:07.85,Default,,0,0,0,,Do you have any suggestions for the students in computer science, especially the students who are learning C++
Dialogue: 0,0:27:12.34,0:27:13.54,Default,,0,0,0,,Yeah, so
Dialogue: 0,0:27:18.74,0:27:23.20,Default,,0,0,0,,I think that currently there are many sources of information,\N
Dialogue: 0,0:27:23.31,0:27:27.40,Default,,0,0,0,,there are many good online courses on computer vision.
Dialogue: 0,0:27:27.40,0:27:38.11,Default,,0,0,0,,I'm glad that you are teaching the C++ class, I saw some bits of it and I think it's very professional.
Dialogue: 0,0:27:38.51,0:27:43.37,Default,,0,0,0,,I'm sure that students will learn a lot from it.
Dialogue: 0,0:27:44.17,0:27:49.88,Default,,0,0,0,,So maybe I have just a few common words,
Dialogue: 0,0:27:50.71,0:28:00.05,Default,,0,0,0,,feel free to ignore them completely, just from my experience of developing software quite a few years.\N
Dialogue: 0,0:28:01.20,0:28:10.08,Default,,0,0,0,,I would suggest students to pay more attention to algorithms, concepts, technologies,\N
Dialogue: 0,0:28:10.57,0:28:14.20,Default,,0,0,0,,rather than particular features, particular programming language.
Dialogue: 0,0:28:18.22,0:28:24.14,Default,,0,0,0,,Many years ago, Fortran was the most language for computing,\N
Dialogue: 0,0:28:24.97,0:28:29.74,Default,,0,0,0,,then C became the dominant language, then C++.\N
Dialogue: 0,0:28:30.28,0:28:37.91,Default,,0,0,0,,I would say currently maybe Python is used more especially with special acceleration extensions, like NumPy [TODO:VP] whatever or Siphon[TODO:VP].\N
Dialogue: 0,0:28:37.91,0:28:42.60,Default,,0,0,0,,Maybe Python is used more actively for computing than everything else.
Dialogue: 0,0:28:42.60,0:28:51.88,Default,,0,0,0,,So do not pay too much attention to the particular feature, particular language,\N
Dialogue: 0,0:28:52.08,0:28:58.11,Default,,0,0,0,,and do not try to use all those fancy features of the language that you just learned in your project\N
Dialogue: 0,0:28:58.48,0:29:06.82,Default,,0,0,0,,Because those features just exist and you want to make your code look cool by using all those features\N
Dialogue: 0,0:29:06.82,0:29:14.25,Default,,0,0,0,,because this's a good change that a couple of months later you won't be able to read your own code because it's too complex.\N
Dialogue: 0,0:29:15.68,0:29:20.74,Default,,0,0,0,,I think this suggestion is especially for C++, right?
Dialogue: 0,0:29:21.17,0:29:24.31,Default,,0,0,0,,Because there are too many features in C++.
Dialogue: 0,0:29:24.31,0:29:36.42,Default,,0,0,0,,Yes, C++, I would say, in the recent standards, they made some small convenient to you like modules.
Dialogue: 0,0:29:36.42,0:29:38.42,Default,,0,0,0,,It's important feature I believe.
Dialogue: 0,0:29:38.42,0:29:42.68,Default,,0,0,0,,But on the other hands, languages becoming quite more and more complex.
Dialogue: 0,0:29:43.57,0:29:52.45,Default,,0,0,0,,And so you need to develop proper style of using C++, not to shoot yourself on the foot.\N
Dialogue: 0,0:29:52.45,0:29:57.57,Default,,0,0,0,,And try not to use manual memory allocation,\N
Dialogue: 0,0:29:57.57,0:30:04.00,Default,,0,0,0,,To use exisiting containers like std::vector, or if you use OpenCV, use cv::Mat, etc.\N
Dialogue: 0,0:30:05.60,0:30:12.88,Default,,0,0,0,,Like try to put some regression test before you do any refactoring or optimization.\N
Dialogue: 0,0:30:12.88,0:30:16.22,Default,,0,0,0,,There should be some tests, of course.
Dialogue: 0,0:30:16.77,0:30:23.97,Default,,0,0,0,,As I said, develop some methodology, a proper methodology how to\N
Dialogue: 0,0:30:23.97,0:30:31.42,Default,,0,0,0,,create robust software that is easy to debug or doesn't need to be debugged at all, it works out of the box.\N
Dialogue: 0,0:30:32.11,0:30:40.08,Default,,0,0,0,,Instead of just using very complex language constructions that you may not fully understand.
Dialogue: 0,0:30:41.20,0:30:49.14,Default,,0,0,0,,Yeah, sure. I also found a lot of students, they spend a lot of time on debugging.
Dialogue: 0,0:30:49.14,0:30:59.08,Default,,0,0,0,,It takes them a lot of time to find a very tiny bug, it's very difficult in C and C++,
Dialogue: 0,0:30:59.42,0:31:09.34,Default,,0,0,0,,because there are memory leaks and maybe some pointers have invalid values,\N
Dialogue: 0,0:31:09.85,0:31:11.34,Default,,0,0,0,,it's quite common, yeah.\N
Dialogue: 0,0:31:11.91,0:31:19.08,Default,,0,0,0,,Yes, so like automatic class you mentioned, for example, shared pointers, it is another very good tool\N
Dialogue: 0,0:31:19.08,0:31:28.82,Default,,0,0,0,,when people avoid using raw pointers in C++.\N
Dialogue: 0,0:31:28.82,0:31:34.71,Default,,0,0,0,,But instead use containers like cv::Vec or cv::Mat or shared pointers.\N
Dialogue: 0,0:31:35.94,0:31:43.11,Default,,0,0,0,,The number of memory leaks problems go almost to zero.\N
Dialogue: 0,0:31:43.48,0:31:45.91,Default,,0,0,0,,Yeah, thank you, thank you for the suggestions!
Dialogue: 0,0:31:46.37,0:31:47.91,Default,,0,0,0,,Yeah, you are welcome!
Dialogue: 0,0:31:48.37,0:31:56.54,Default,,0,0,0,,I believe the students will be benefited from your suggestions and also your introduction to OpenCV, thank you!
Dialogue: 0,0:31:56.54,0:31:58.54,Default,,0,0,0,,You are welcome!
